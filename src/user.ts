import { AngularFireDatabase } from 'angularfire2/database';
import { AngularFireAuth } from 'angularfire2/auth';
import { AngularFireObject } from 'angularfire2/database/interfaces';
import { AngularFirestoreDocument } from 'angularfire2/firestore';
import { DocumentReference} from '@firebase/firestore-types'

import * as firebase from 'firebase/app'

import { UserSchema } from "./schema"


export class User {
  /*
   * Instance of AngularFire db
   */
  public static af: AngularFireDatabase; // = null;

  public constructor(protected um: UserSchema,
    protected afo: AngularFirestoreDocument<UserSchema>,
    protected _id: string) {

  }

  protected onPropertyChangeError(property: string, error: any) {
    console.log(error);
  }

  /*
   * Unique push id, generated by firebase
   * 
   * @readonly
   */
  get id():string {
    return this.id;
  }

  /*
   * Unique id generated from displayname
   */
  get nameid() {
    return this.um.nameid;
  }

  /*
   * Pretty name
   */
  public get displayName(): string {
    return this.um.displayname;
  }

  /*
   * Absolute path to avatar file
   */
  get photoUrl(): string {
    return this.um.photo || "/assets/default-user-avatar.png";
  }

  get birthday(): string {
    return this.um.birthday;
  }

  get location(): string {
    return this.um.location;
  }

  get gender(): string {
    return this.um.gender;
  }

  get ref():DocumentReference {
    return this.afo.ref;
  }
}

/*
 * Due to the fuckup in TypeScript implementation, we must copy all getters from parent class.
 * @see https://github.com/Microsoft/TypeScript/issues/338
 */
export class LoggedUser extends User {

  /*
   * Instance of AngularFire Auth
   */
  public static afa: AngularFireAuth; // = null;

  public constructor(protected um:UserSchema,
    protected afo: AngularFirestoreDocument<UserSchema>,
    private fbuser: firebase.User,
    protected _id: string) {
    super(um, afo, _id);
  }

  get displayName(): string {
    return this.um.displayname;
  }

  set displayName(n: string) {
    if (n == this.um.displayname) return;

    this.afo.update({ displayname: n }).then(
      resp => this.um.displayname = n
    ).catch(
      error => this.onPropertyChangeError("displayname", error)
      );
  }

  get email(): string {
    return this.fbuser.email;
  }

  set email(e: string) {

  }

  /* @TODO set avatar */

  get birthday(): string {
    return this.um.birthday;
  }

  set birthday(bday: string) {
    if (bday == this.um.birthday) return;

    this.afo.update({ birthday: bday }).then(
      resp => this.um.birthday = bday
    ).catch(
      error => this.onPropertyChangeError("displayname", error)
      );
  }

  get location(): string {
    return this.um.location;
  }

  set location(l: string) {
    if (l == this.um.location) return;

    this.afo.update({ location: l }).then(
      resp => this.um.location = l
    ).catch(
      error => this.onPropertyChangeError("location", error)
      );
  }

  get gender(): string {
    return this.um.gender;
  }

  set gender(g: string) {
    if (g == this.um.gender) return;

    this.afo.update({ gender: g }).then(
      resp => this.um.gender = g
    ).catch(
      error => this.onPropertyChangeError("gender", error)
      );
  }

  get ref():DocumentReference {
    return this.afo.ref;
  }
}