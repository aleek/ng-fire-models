import { AngularFireAuth } from 'angularfire2/auth';
import { AngularFireObject } from 'angularfire2/database/interfaces';
import { AngularFirestore, AngularFirestoreDocument } from 'angularfire2/firestore';
import { DocumentReference } from '@firebase/firestore-types'

import * as firebase from 'firebase/app'

import { UserSchema } from "./schema"
//import { Observable } from 'rxjs/Observable';
import * as Rx from 'rxjs/Rx';
import { Observable } from 'rxjs/Observable';

/**
 * Habababa
 */
export class User {
  /*
   * Instance of AngularFire db
   */
  public static afs: AngularFirestore; // = null;

  private uid: string;


  public static getById(id: string): Rx.Observable<User> {
    return Rx.Observable.empty();
  }

  public static getByNameId(nameid: string): Rx.Observable<User> {
    return null;
  }

  public constructor(protected model: UserSchema, protected doc: AngularFirestoreDocument<UserSchema>, protected fbuser: firebase.User) {
    if (model == null) {
      throw new Error("Cannot create User object with empty model parameter");
    }
    else if (doc == null) {
      throw new Error("Cannot create User object with empty doc parameter");
    }
    else if (fbuser == null) {
      throw new Error("Cannot create User object with empty fbuser parameter");
    }
    this.uid = fbuser.uid;

    doc.valueChanges().subscribe((mode: UserSchema) => {
      this.model = model;
    });
  }


  protected onPropertyChangeError(property: string, error: any) {
    console.log(error);
  }

  /*
   * Unique push id, generated by firebase
   * 
   * @readonly
   */
  get id(): string {
    return this.uid;
  }

  /*
   * Unique id generated from displayname
   */
  get nameid() {
    return this.model.nameid;
  }

  /*
   * Pretty name
   */
  public get displayName(): string {
    return this.model.displayname;
  }

  /*
   * Absolute path to avatar file
   */
  get photoUrl(): string {
    return this.model.photo || "/assets/default-user-avatar.png";
  }

  get birthday(): string {
    return this.model.birthday;
  }

  get location(): string {
    return this.model.location;
  }

  get gender(): string {
    return this.model.gender;
  }

  /*   get ref(): DocumentReference {
      return this.afo.ref;
    } */
}

/*
 * Due to the bug in TypeScript implementation, we must copy all getters from parent class.
 * @todo Maybe we can do it better?
 * @see https://github.com/Microsoft/TypeScript/issues/338
 */
export class LoggedUser extends User {

  protected model: UserSchema;
  protected auth: AngularFireAuth;

  /*   private static auth: AngularFireAuth = null;
    private static firestore: AngularFirestore; */

  public constructor(model: UserSchema,
    doc: AngularFirestoreDocument<UserSchema>,
    fbuser: firebase.User,
    auth: AngularFireAuth) {
    super(model, doc, fbuser);
    this.auth = auth;
  }

  /**
   * The class must be initialized before using. This is not very clean solution
   * and we need to implement better one.
   * Currently, initialization is done by AuthService
   * @TODO implement better solution
   * @param auth AngularFireAuth instance
   * @param firestore AngularFirestore instance
   */
  /*   public static initialize(auth: AngularFireAuth, firestore: AngularFirestore) {
      LoggedUser.auth = auth;
      LoggedUser.firestore = firestore;
    }
  
    private static initialized(): boolean {
      return (LoggedUser.auth != null) && (LoggedUser.firestore != null);
    } */

  public logout():Observable<void> {
    return Observable.fromPromise<void>(this.auth.auth.signOut());
  }


  /**
   * @todo remomber to support reauthenticate user
   * https://firebase.google.com/docs/auth/web/manage-users#re-authenticate_a_user
   */
  public deleteAccount(): Rx.Observable<any> {
    return Rx.Observable.fromPromise(this.fbuser.delete());
  }

  /* schema fields getters and setters */
  get displayName(): string {
    return this.model.displayname;
  }

  set displayName(n: string) {
    if (n == this.model.displayname) return;

    this.doc.update({ displayname: n });
  }

}